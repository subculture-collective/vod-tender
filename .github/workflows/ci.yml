name: ci

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    backend:
    gitleaks:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            actions: read
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Run Gitleaks
              uses: gitleaks/gitleaks-action@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITLEAKS_ENABLE_SUMMARY: true
              # Fails on any secret findings. Use .gitleaks.toml for baseline suppressions.

    govulncheck:
        runs-on: ubuntu-latest
        permissions:
            contents: read
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: '1.22.x'
                  cache: true

            - name: Install govulncheck
              run: go install golang.org/x/vuln/cmd/govulncheck@latest

            - name: Run govulncheck
              working-directory: backend
              run: govulncheck ./...
              # Fails on any known vulnerabilities affecting this code. Go vuln DB is curated for exploitable vulns.

    build-test-lint:
        runs-on: ubuntu-latest
        permissions:
            contents: read
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install system deps (sqlite3 for cgo)
              run: sudo apt-get update && sudo apt-get install -y libsqlite3-dev

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: '1.23.x'
                  cache: true
                  cache-dependency-path: backend/go.sum

            - name: Go env
              run: |
                  go version
                  go env

            - name: Build
              working-directory: backend
              run: go build ./...

            - name: Test
              working-directory: backend
              run: go test ./... -v

            - name: Test with coverage
              working-directory: backend
              run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              with:
                  files: ./backend/coverage.out
                  fail_ci_if_error: false
                  token: ${{ secrets.CODECOV_TOKEN }}

            # Temporarily disabled while building up test coverage
            # - name: Check coverage threshold
            #   working-directory: backend
            #   run: |
            #       COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
            #       echo "Total coverage: ${COVERAGE}%"
            #       if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            #           echo "Coverage ${COVERAGE}% is below 70% threshold"
            #           exit 1
            #       fi

            - name: Vet
              working-directory: backend
              run: go vet ./...

            - name: govulncheck
              working-directory: backend
              run: |
                  go install golang.org/x/vuln/cmd/govulncheck@latest
                  $(go env GOPATH)/bin/govulncheck ./...

            - name: Lint
              uses: golangci/golangci-lint-action@v6
              with:
                  version: latest
                  working-directory: backend

            - name: Docker build
              run: docker build -t vod-tender .

    frontend:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: frontend/npm-lock.yaml

            - name: Install dependencies
              working-directory: frontend
              run: npm install

            - name: Build
              working-directory: frontend
              run: npm run build

            - name: Lint
              working-directory: frontend
              run: npm run lint
            - name: Build backend Docker image
              run: docker build -t vod-tender-backend:${{ github.sha }} ./backend

            - name: Build frontend Docker image
              run: docker build -t vod-tender-frontend:${{ github.sha }} ./frontend

            - name: Run Trivy vulnerability scanner on backend
              uses: aquasecurity/trivy-action@0.33.1
              with:
                  image-ref: 'vod-tender-backend:${{ github.sha }}'
                  format: 'sarif'
                  output: 'trivy-backend-results.sarif'
                  severity: 'CRITICAL,HIGH'
                  exit-code: '1'

            - name: Upload backend Trivy results to GitHub Security
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: 'trivy-backend-results.sarif'
                  category: 'trivy-backend'

            - name: Run Trivy vulnerability scanner on backend (JSON report)
              uses: aquasecurity/trivy-action@0.33.1
              if: always()
              with:
                  image-ref: 'vod-tender-backend:${{ github.sha }}'
                  format: 'json'
                  output: 'trivy-backend-results.json'
                  severity: 'CRITICAL,HIGH,MEDIUM,LOW'

            - name: Run Trivy vulnerability scanner on frontend
              uses: aquasecurity/trivy-action@0.33.1
              with:
                  image-ref: 'vod-tender-frontend:${{ github.sha }}'
                  format: 'sarif'
                  output: 'trivy-frontend-results.sarif'
                  severity: 'CRITICAL,HIGH'
                  exit-code: '1'

            - name: Upload frontend Trivy results to GitHub Security
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: 'trivy-frontend-results.sarif'
                  category: 'trivy-frontend'

            - name: Run Trivy vulnerability scanner on frontend (JSON report)
              uses: aquasecurity/trivy-action@0.33.1
              if: always()
              with:
                  image-ref: 'vod-tender-frontend:${{ github.sha }}'
                  format: 'json'
                  output: 'trivy-frontend-results.json'
                  severity: 'CRITICAL,HIGH,MEDIUM,LOW'

            - name: Upload Trivy scan reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: trivy-reports
                  path: |
                      trivy-backend-results.json
                      trivy-backend-results.sarif
                      trivy-frontend-results.json
                      trivy-frontend-results.sarif
                  retention-days: 30
