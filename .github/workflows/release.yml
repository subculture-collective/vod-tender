name: release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/backend:latest
            ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/frontend:latest
            ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign backend image
        run: |
          cosign sign --yes \
            ghcr.io/${{ github.repository }}/backend@${{ steps.build-backend.outputs.digest }}

      - name: Sign frontend image
        run: |
          cosign sign --yes \
            ghcr.io/${{ github.repository }}/frontend@${{ steps.build-frontend.outputs.digest }}

      - name: Generate SBOM for backend
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}
          artifact-name: sbom-backend.spdx.json
          output-file: ./sbom-backend.spdx.json

      - name: Generate SBOM for frontend
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}
          artifact-name: sbom-frontend.spdx.json
          output-file: ./sbom-frontend.spdx.json

      - name: Build backend binary
        working-directory: backend
        run: |
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" -o ../vod-tender-backend-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -trimpath -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" -o ../vod-tender-backend-linux-arm64 .
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -trimpath -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" -o ../vod-tender-backend-darwin-amd64 .
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -trimpath -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" -o ../vod-tender-backend-darwin-arm64 .

      - name: Generate checksums
        run: |
          sha256sum vod-tender-backend-* > checksums.txt

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog from commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          files: |
            vod-tender-backend-*
            checksums.txt
            sbom-backend.spdx.json
            sbom-frontend.spdx.json
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Image digest summary
        run: |
          echo "## Release ${{ steps.version.outputs.version }} ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Container Images" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "  - Digest: \`${{ steps.build-backend.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "  - Digest: \`${{ steps.build-frontend.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms" >> $GITHUB_STEP_SUMMARY
          echo "- linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- linux/arm64" >> $GITHUB_STEP_SUMMARY
