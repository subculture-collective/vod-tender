services:
  postgres:
    container_name: vod-postgres
    image: postgres:16
    restart: unless-stopped
    ports:
      - "5469:5432"
    environment:
      POSTGRES_DB: vod
      POSTGRES_USER: vod
      POSTGRES_PASSWORD: vod
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      web:
        aliases:
          - vod-postgres

  jaeger:
    container_name: vod-jaeger
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686" # Jaeger UI
      - "${JAEGER_OTLP_GRPC_PORT:-4317}:4317" # OTLP gRPC receiver
      - "${JAEGER_OTLP_HTTP_PORT:-4318}:4318" # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      web:
        aliases:
          - vod-jaeger

  api:
    container_name: vod-api
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      # Ensure API uses the postgres service and persists data
      DB_DSN: postgres://vod:vod@postgres:5432/vod?sslmode=disable
      DATA_DIR: /data
      # Provide cookies to yt-dlp for subscriber-only/authenticated VODs
      YTDLP_COOKIES_PATH: /run/cookies/twitch-cookies.txt
      # OpenTelemetry tracing endpoint (Jaeger)
      OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4317
    volumes:
      - vod_data:/data
      - ./secrets:/run/cookies:ro
    ports:
      - "${API_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "/app/healthcheck"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      web:
        aliases:
          - vod-api

  frontend:
    container_name: vod-frontend
    build:
      context: ./frontend
      args:
        VITE_API_BASE_URL: "http://localhost:${API_PORT:-8080}"
    restart: unless-stopped
    depends_on:
      - api
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q -O - http://127.0.0.1/ >/dev/null 2>&1 || exit 1",
        ]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      web:
        aliases:
          - vod-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"

  backup:
    container_name: vod-backup
    image: postgres:16
    restart: unless-stopped
    depends_on:
      - postgres
    entrypoint:
      [
        "bash",
        "-lc",
        "mkdir -p /backups; while true; do bash /scripts/backup.sh /backups || echo backup failed; sleep ${BACKUP_INTERVAL:-86400}; done",
      ]
    environment:
      POSTGRES_DB: vod
      POSTGRES_USER: vod
      POSTGRES_PASSWORD: vod
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      BACKUP_INTERVAL: "86400" # seconds (1 day)
    volumes:
      - ./scripts:/scripts:ro
      - pgbackups:/backups
    networks:
      - web

volumes:
  pgdata:
  vod_data:
  pgbackups:

networks:
  web:
    driver: bridge
